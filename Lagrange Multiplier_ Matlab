clear all; close all;
%% Basis Function
% Local basis functions
phi = {};
phi{1} = @(x1,x2) 1-x1-x2;
phi{2} = @(x1,x2) x1;
phi{3} = @(x1,x2) x2;

% Derivative of basis functions (Gradient of Basis functions)
 

dphix2 = {}; % respected to x2
dphix2{1} = @(x1,x2) -1;
dphix2{2} = @(x1,x2) 0;
dphix2{3} = @(x1,x2) 1;

Gradient = [-1 1 0; -1 0 1];
%% Numerical Quadratures
Q = [1/2 0 1/2;
    0 1/2 1/2]; % the quadrature points for integration
w = [1/6 1/6 1/6]; % weight

%% Affine Mapping
% Local Triangle
%p = [0 1 0; 0 0 1]; % points
%e = [1 2 3; 2 3 1] ; % edges
%t = [1 2 3]' ; % triangles
[p,e,t]=initmesh(decsg([3 4 0 1 1 0 0 0 1 1]'), 'Hmax',0.1);
t=t(1:3,:);
figure 
trimesh(t',p(1,:),p(2,:));

Ne = size(t,2); % number of edges
Np = size(p,2); % number of points
% initialize A and F
Ag = sparse(Np, Np); % Global stiffness matrix
Fg = zeros(Np, 1); %Global load vector
vg = zeros(Np,1);
% Nodes of local Triangle
for k=1:size(t,2);
n1 = p(:,t(1,k));
n2 = p(:,t(2,k));
n3 = p(:,t(3,k));

K = [n2-n1 n3-n1];
b_k = n1;
q = bsxfun(@plus, K*Q, b_k);
invKt = inv(K)';
fun = @(x1,x2)cos(pi*x1)*cos(pi*x2);
Al = zeros(3,3); % Local stiffness matrix
Fl = zeros(3,1); % Local load vector 
vl = zeros(3,1); 
% Local matrix and load function
        for n= 1:3
            for m=1:3  
                for l=1:3
    Al(n,m) = Al(n,m) + w(l)*((invKt*Gradient(:,m))'*(invKt*Gradient(:,n))* abs(det(K)));
    vl(l) = vl(l) + phi{n}(Q(1,l),Q(2,l));
             if m==1
    F     = K*Q(:,n)+b_k; 
    Fl(n,1) = Fl(n,1) + fun(F(1), F(2))*phi{n}(Q(1,l),Q(2,l))*w(l)*abs(det(K));
             end
                    end
            end
        end
% Global matrix and load function
       Ag(t(:,k),t(:,k)) =  Ag(t(:,k),t(:,k)) + Al;
       Fg(t(:,k),1) = Fg(t(:,k)) + Fl;
       vg(t(:,k),1) = vg(t(:,k)) + vl;
end
M = zeros(2*size(Ag));
M(1:Np,1:Np) = Ag;
M(1, Np+1:2*Np) = vg';
M(Np+1:2*Np,1) = vg ;

M = [Ag, vg; vg', 0];

U = zeros(Np+1)';
FF = [Fg ; 0];
U = M\FF;
figure
trisurf(t', p(1,:),p(2,:),U(1:Np,1));
title('Approximate solution')

uexact = @(x,y) (1/(2*pi^2) * (cos(pi.*x).*cos(pi.*y)));

figure
trisurf(t', p(1,:),p(2,:),uexact(p(1,:),p(2,:)));
title('Exact solution')
LifnError = 0;
LifnError = LifnError +(abs(uexact(p(1,:),p(2,:))-U(1:Np)'));
figure;
trisurf(t', p(1,:),p(2,:),LifnError);
title('L-infinity error')





