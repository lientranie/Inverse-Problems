clear all, close all;
%% Homework 1
% Constructing matrix A
N = 100;
A = ones(N+1); % Create a matrix full of ones
A = tril(A); % Take lower triangular part
A = A - eye(N+1)/2; % Subtract 1/2 from the diagonal
A(:,1) = 1/2; % Set the elements of the left most column to 1/2
A(1,:) = []; % Remove the first row
A = A/N ; % Scale the matrix
% Compute the SVD and pseudoinverse
[U,S,V] = svd(A);
d = diag(S);
Sp = zeros(size(S))';
dp = 1/d;
Sp(1:length(d), 1:length(d)) = diag(dp); % place the inverse singular values on the diagonal
Ap = V*Sp*U'; % compute the pseudoinverse of A
% Plot the singular values on a logarithmic scale
figure(1);
clf;
semilogy(d,'.','MarkerSize',14);
title ('The singular values of A');
xlabel('k');
ylabel('\lambda_k');
% Define the discretization grid, the fiven function g and the exact
% derivative g0
t = linspace(1/N,1,N).';
g = cos(pi*t).*sin(4*pi*t).^2 + 5* t.^2;
g0 = -pi*sin(pi*t) .* sin(4*pi*t) .^2 + 4*pi*cos(pi*t) .* sin(8*pi*t) + 10*t;

% Noiseless measurement
f = Ap*g ; % Solution wih pseudoinverse without noise
figure(2)
clf;
axes('FontSize', 14, 'FontWeight', 'bold');
hold on
plot([0;t],f,'r') % Plot the inverted solution
plot(t,g0,'g--') % Exact derivative
title('Noiseless measurement')
legend('A^+y without noise', 'Exact derivative');
hold off

% Noisy Measurement
noise = 0.05 ; % Standard deviation
gn = g + noise*randn(N,1); % Add noise to measurements
fn = Ap*gn; % noisy solution
figure (3)
clf;
axes('FontSize', 14, 'FontWeight', 'bold');
hold on
plot([0;t],fn,'r') % Plot the inverted solution
plot(t,g0,'g') % Exact derivative
title('Noisy measurement')
legend(['A^+y with noise, std =',num2str(noise)], 'Exact derivative');
hold off
% part (e)
% Remove all singular values above the threshold value alpha
iter = 4;
for alpha = [0.005, .02, 0.1]
    ind = max(find(d > alpha)) , % Find the maximal index with the leas singular value above the threshold
    Sp1 = diag([1./d(1:ind); zeros(N-ind,1)]); % Form the truncated singular matrix
    Sp1 = [Sp1 ; zeros(1,N)];
    Ap1 = V*Sp1*U'; % Truncated SVD
    fn1 = Ap1*gn; % TSVD solution with noise
    err = norm(A*fn1 - gn); % The 2 norm of the residual
    figure(iter)
    clf;
    axes('FontSize', 14, 'FontWeight', 'bold');
hold on

% plot the solution 
plot([0;t],fn1,'r')
plot(t, g0,'g')
hold off
iter = iter + 1;
end

%% Homework 2
close all;
load ex2.mat
% Initialize parameter
T = 0.1; % Time parameter
N = 100; % Number of discretization points
h = pi/N; % Step size
x = linspace(h, pi-h, N-1);

% Construct the system matrix
B = diag(ones(N-2,1),-1) - 2*eye(N-1) + diag(ones(N-2,1),1);
B = 1/h^2 *B;
B = B - eye(N-1);

A = expm(T*B); % Forward solutions
% (b,c)
noise = 0.01;
moro2 =(N-1)*noise^2; % Mozorov discrepancy principle parameter
prec = 10^(-10); % Stopping criterion for Newton's method

% loop over the two date sets
for k =1:2
    eval([ 'y = y', num2str(k),';']) ; % Set y= y1, y=y2
    y_aug = [ y ; zeros(N-1,1)]; % Stacked form of the emasurement date
    delta = 0.01 ; % Initial guess for the regularization parameter
    discr2 = 1; % force at least one Newton iteration
    % Use Newton's method to find delta such that norm(y -A*w)^2 == moro^2
    while discr2 > prec
        K = [A; sqrt(delta)*eye(N-1)] ; % Stacked form of the Tikhonov operator
        w = K\y_aug; %backflash Tikhonov regularized solution
        err = norm(y -A*w)^2; % the discrepancy
        discr2 = abs(err -moro2);        
        % Derivative of discrepancy w.r.t. delta
        d_err = 2*delta*w'*((A'*A + delta*eye(N-1))\w);        
        % Newton step to update the regularization parameter
        delta = delta + (moro2 - err)/d_err;
    end
    
    % Solution with Moronov regularization parameter
    K = [A; sqrt(delta)*eye(N-1)];
    w = K\y_aug;
    ww(k,:) = w;
    % Chect that the Morozov discrepancy goal was achieved
    disp(['y =y', num2str(k)]);
    disp(['Morozov discrepancy goal:', num2str(sqrt(moro2))]);
    disp(['Obtained discrepancy:', num2str(norm(y-A*w))]);
    disp(['Regularization parameter : ', num2str(delta)]);
   
    %Plot the results
    figure(k);
    plot (x,w,'b');
    title(sprintf('Tikhonov reconstruction from y%d with delta = %.5e',k,delta))   
end
% The true initial heat distributions
f1 = 0.10*x.*(3*x -pi).*(4*x-3*pi).*(x-pi);
f2 = f1 +2*sin(10*x);
figure(1);
hold on;
plot(x,f1,'r-.');
legend('Reconstruction', 'True distribution');
hold off
figure (2);
hold on
plot(x,f2,'r-.');
legend('Reconstruction', 'True distribution');

% Compare the contructions
figure(3);
plot(x,ww(1,:),'g',x,ww(2,:),'r-.');
title('Comparison of the reconstructions');
legend('Reconstruction from y1','Reconstruction from y2');

%% Homework 3
load ex3.mat
%set(0,'DefaultLineLineWitdth',2, 'DefaultAxesFontSize',[15], 'DefaultAxesFontWeight','bold')
% Initial parameters
noise = 0.015;
epsilon = noise*sqrt(numel(S)) ; % Morozov discrepancy goal
y = S(:); % Data vector
beta = [3, 10, 0.001]; % Consider 3 parameter for beta
% we loop over the different values of beta
for k = 1:numel(beta)
    lam = svds(A,1);
    disp(['If beta =', num2str(beta(k)),', does LF converge:', num2str(beta(k) < 2/lam^2)])
    x = zeros(N^2,1); % N^2 x1 empty vector
    iter =1;
    residual = norm(y);
    while residual(iter) > epsilon
        iter = iter +1;
        x = x + beta(k)*(A'*(y-A*x)); % The fixed point Landweber-Fridman scheme.
        residual(iter) = norm(A*x - y);
    end
    % Plot the solution
    figure
    Reco = reshape(x,N,N);
    imagesc(Reco)
    axis 'square'
    colormap 'gray'
    title(sprintf('Solution using Landweber-Fridman with beta = %.3f\n iteration: %.0f',beta(k),numel(residual)-1));
    
    % Plot the residual
    figure
    semilogy (0:iter-1, residual)
    title(['Residual usng Landweber-Fridman with beta =', num2str(beta(k))]);
    xlabel('Iteration')
    ylabel('Residual')
end


%% Homework 3b
Maxiter = 200;
x = rezos(N^2,1);
residual =[]; % Residual of the normal equations
error = [];
k =1;
r = A'*y; %RHS of the normal equations
s =r;
residual(k) = norm(r);
error(k) = norm(y);

% Conjugate gradient iteration.
while(error(k) > epsilon)
    hlp = A'*(A*s); % An auxiliary variable
    alpha = residual(k)^2/(s'*hlp); % The line search in the direction s.
    x = x + alpha*s;
    r = r - alpha*hlp; % Update the residual.
    residual(k+1) = norm(r); % Update the residual error
    beta = residual(k+1) ^2/ residual(k)^2; % Compute the new search direction
    s = r + beta*s;
    k = k+1;
    error(k) = norm(A*x -y);
end

figure
Reco = reshape(x,100,100);
imagesc(Reco), axis 'square', colormap 'gray'
title(['Solution using Conjugate Gradian, iteration: ', num2str(k-1)])

while (k<= maxiter)
    hlp = A'*(A*s); % An auxiliary variable
    alpha = residual(k)^2/(s'*hlp); % The line search in the direction s.
    x = x + alpha*s;
    r = r - alpha*hlp; % Update the residual.
    residual(k+1) = norm(r); % Update the residual error
    beta = residual(k+1) ^2/ residual(k)^2; % Compute the new search direction
    s = r + beta*s;
    k = k+1;
    error(k) = norm(A*x -y);
end

figure
Reco = reshape(x,100,100);
imagesc(Reco), axis 'square', colormap 'gray'
title(['Solution using Conjugate Gradian, iteration: ', num2str(k-1)])
figure
semilogy(0:(k-1), error)
title(['Residual using Conjugate Gradient, iterations: ', num2str(k-1)])
